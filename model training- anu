## new architechture
## build new neural network to train each batch
def build_model():
    model = tf.keras.Sequential([
        tf.keras.Input((32,16,2)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(512, activation="relu"),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dense(2, activation="linear"),
    ])
    model.compile(
        optimizer=tf.keras.optimizers.Adam(),
        loss="mse"
    )
    return model

batch_sizes = [32, 64, 256, 1024, 4096]
results = {}

for b in batch_sizes:
    nn = build_model()  # fresh model each time
    print(f"\nTraining with batch size: {b}")
    history = nn.fit(
        training_set_features.batch(b),
        epochs=20,
        validation_data=test_set_features.batch(b),
        verbose=1
    )
    results[b] = history.history["val_loss"][-1]

print("\nBatch-size → final val_loss")
for b, vl in results.items():
    print(f"  {b:>5} → {vl:.4f}")
